???#--------------------------------------------------------------------
# Copyright (c) 1999-2004, International Business Machines
# Corporation and others. All Rights Reserved.
#--------------------------------------------------------------------
# $Source: /xsrl/Nsvn/icu/icu4j/src/com/ibm/icu/impl/data/Attic/Transliterator_Greek_Latin_UNGEGN.txt,v $
# $Date: 2004/05/21 01:01:50 $
# $Revision: 1.4 $
#--------------------------------------------------------------------
# For modern Greek, based on UNGEGN rules.

# Rules are predicated on running NFD first, and NFC afterwards
# MINIMAL FILTER GENERATED FOR: Greek-Latin/UNGEGN
# WARNING: need to add accents to both filters ###
# :: [????????;??????????????????????????????????????????????-????-????-????-????-????-????-????-????????-??????-??????????-??????-????-????-????-?????????????-??????-??????-??????-??????-??????-??????-??????-??????-??????-??????-??????-??????-??????-??????-??????-???????????????-??????-??????-?????????-??????-??????-??????-?????????-??????-??????-??????\u03F7-\u07FB\u03F9] ;

:: [[[:Greek:][:Mn:][:Me:]] [\:-;?\u00B7\u037E\u0387]] ;
::NFD (NFC) ;

# Useful variables

$lower = [[:latin:][:greek:] & [:Ll:]] ;
$upper = [[:latin:][:greek:] & [:Lu:]] ;
$accent = [[:Mn:][:Me:]] ;

$macron = ?? ;
$ddot = ?? ;

$lcgvowel = [??????????????] ;
$ucgvowel = [??????????????] ;
$gvowel = [$lcgvowel $ucgvowel] ;
$lcgvowelC = [$lcgvowel $accent] ;

$evowel = [aeiouyAEIOUY];
$vowel = [ $evowel $gvowel] ;

$beforeLower = $accent * $lower ;

$gammaLike = [??????????????????] ;
$egammaLike = [GKXCgkxc] ;
$smooth = ?? ;
$rough = ?? ;
$iotasub = ?? ;

$softener = [????????????????????????????????$gvowel] ;

$under = ??;

$caron = ??;

$afterLetter = [:L:] [\'$accent]* ;
$beforeLetter = [\'$accent]* [:L:] ;

# Fix punctuation

# preserve orginal
\: <> \: $under ;
\? <> \? $under ;

\; <> \? ;
?? <> \: ;

# Fix any ancient characters that creep in

?? > ?? ;
?? > ?? ;
?? > ?? ;
$smooth > ;
$rough > ;
$iotasub > ;
?? > ;

# need to have these up here so the rules don't mask

?? <> i $under ;
?? <> I $under ;

?? } $beforeLower <> Ps ;
?? <> PS ;
?? <> ps ;

?? <> o $under ;
?? <>  O $under;

# at begining or end of word, convert mp to b

[^[:L:]$accent] { ???? > b ;
???? } [^[:L:]$accent] > b ;
[^[:L:]$accent] { [????][????] > B ;
[????][????] } [^[:L:]$accent] > B ;

???? < b ;
???? < B } $beforeLower ;
???? < B ;

# handle diphthongs ending with upsilon

???? <> ou ;
???? <> OU ;
???? <> Ou ;
???? <> oU ;

$fmaker = [aeiAEI] $under ? ;
$shiftForwardVowels = [[:Mn:]-[\u0308]]; # note: a diaeresis keeps the items separate

$fmaker { ?? ( $shiftForwardVowels )* } $softener > $1 v $under ;
?? $1 < ( $shiftForwardVowels )* v $under ;

$fmaker { ?? ( $shiftForwardVowels )* } > $1 f $under;
?? $1 < ( $shiftForwardVowels )* f $under ;

$fmaker { ?? } $softener <> V $under ;
$fmaker { ?? <> U $under ;

?? <> y ;
?? <> Y ;

# NORMAL

?? <> a ;
?? <> A ;

?? <> v ;
?? <> V ;

?? } $gammaLike <> n } $egammaLike ;
?? <> g ;
?? } $gammaLike <> N } $egammaLike ;
?? <> G ;

?? <> d ;
?? <> D ;

?? <> e ;
?? <> E ;

?? <> z ;
?? <> Z ;

?? <> th ;
?? } $beforeLower <> Th ;
?? <> TH ;

?? <> i ;
?? <> I ;

?? <> k ;
?? <> K ;

?? <> l ;
?? <> L ;

?? <> m ;
?? <> M ;

?? } $gammaLike > n\' ;
?? <> n ;
?? } $gammaLike <> N\' ;
?? <> N ;

?? <> x ;
?? <> X ;

?? <> o ;
?? <> O ;

?? <> p ;
?? <> P ;

?? <> r ;
?? <> R ;

# insert separator before things that turn into s
[Pp] { } [??????????????] > \' ; 

# special S variants

?? <> S?? ; # ?? GREEK CAPITAL LETTER SHO Uppercase_Letter Grek - L 
?? <> s?? ; #?? GREEK SMALL LETTER SHO Lowercase_Letter Grek - L 
?? <> S?? ; # ?? GREEK CAPITAL LETTER SAN Uppercase_Letter Grek - L 
?? <> s?? ; # ?? GREEK SMALL LETTER SAN Lowercase_Letter Grek - L 

# Caron means exception

# before a letter, initial
?? } $beforeLetter <> s $under } $beforeLetter;
?? } $beforeLetter <> s } $beforeLetter;

# otherwise, after a letter = final
$afterLetter { ?? <> $afterLetter { s $under;
$afterLetter { ?? <> $afterLetter { s ;

# otherwise (isolated) = initial
?? <> s $under;
?? <> s ;

# [Pp] { ?? <> \'S ;
?? <> S ;

?? <> t ;
?? <> T ;

?? <> f ;
?? <> F ;

?? <> ch ;
?? } $beforeLower <> Ch ;
?? <> CH ;

# Completeness for ASCII

# $ignore = [[:Mark:]''] * ;

| ch < h ;
| k  < c ;
| i  < j ;
| k < q ;
| b < u } $vowel ;
| b < w } $vowel ;
| y < u ;
| y < w ;

| Ch < H ;
| K < C ;
| I < J ;
| K < Q ;
| B < W } $vowel ;
| B < U } $vowel ;
| Y < W ;
| Y < U ;

# Completeness for Greek

?? > | ?? ;
?? > | ?? ;
?? > | ?? ;
?? > | ?? ;
?? > | ?? ;

?? > | ?? ;
?? > | ?? ;
?? > | ?? ;
?? > | ??; #U+03F9 GREEK CAPITAL LUNATE SIGMA SYMBOL
?? > j ;
?? > | ?? ;
?? > | ?? ;
?? > | ?? ;

# delete any trailing ' marks used for roundtripping

 < [????] { \' } [Ss] ;
 < [????] { \' } $egammaLike ;

::NFC (NFD) ;

# MINIMAL FILTER GENERATED FOR: Latin-Greek/UNGEGN BACKWARD
:: ([[[:Latin:][:Mn:][:Me:]] ['\:?]]) ;
