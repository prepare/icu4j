#--------------------------------------------------------------------
# Copyright (c) 1999-2001, International Business Machines
# Corporation and others. All Rights Reserved.
#--------------------------------------------------------------------
# $Source: /xsrl/Nsvn/icu/icu4j/src/com/ibm/text/resources/Attic/Transliterator_el_Latin.txt,v $
# $Date: 2001/11/02 19:07:06 $
# $Revision: 1.2 $
#--------------------------------------------------------------------

# Rules are predicated on running NFD first, and NFC afterwards
::NFD (NFC) ; 

# For modern Greek. 

# Useful variables

$lower = [:Ll:] ; 
$upper = [:Lu:] ; 
$accent = [:M:] ; 

$macron = \u0304 ;
$ddot = \u0308 ;

$lcgvowel = [αεηιουω] ; 
$ucgvowel = [ΑΕΗΙΟΥΩ] ; 
$gvowel = [$lcgvowel $ucgvowel] ; 
$lcgvowelC = [$lcgvowel $accent] ; 

$evowel = [aeiouyAEIOUY];
$vowel = [ $evowel $gvowel] ; 

$beforeLower = $accent * $lower ; 

$gammaLike = [ΓΚΞΧγκξχϰ] ; 
$egammaLike = [GKXCgkxc] ; 
$smooth = ̓ ; 
$rough = ̔ ; 
$iotasub = ͅ ; 

$softener = [βΒγΓδΔζΖλΛμΜνΝρΡ$gvowel] ;

$under = \u0331;

$caron = \u030C;

$afterLetter = [:^L:] [\'[:M:]]* ;
$beforeLetter = [\'[:M:]]* [:^L:] ;


# Fix punctuation

\; <> \? ;
· <> \: ;

# Fix any ancient characters that creep in

\u0342 > \u0301 ;
\u0302 > \u0301 ;
\u0300 > \u0301 ;
$smooth > ;
$rough > ;
$iotasub > ;
\u037A > ;

# need to have these up here so the rules don't mask

η <> i $under ;
Η <> I $under ;

Ψ } $beforeLower <> Ps ; 
Ψ <> PS ; 
ψ <> ps ; 

ω <> o $under ;
Ω <>  O $under;

# at begining or end of word, convert mp to b

[^[:L:][:M:]] } μπ > b ; 
μπ } [^[:L:][:M:]] > b ; 
[^[:L:][:M:]] } [Μμ][Ππ] > B ; 
[Μμ][Ππ] } [^[:L:][:M:]] > B ;

μπ < b ; 
Μπ < B { $beforeLower ; 
ΜΠ < B ; 

# handle diphthongs ending with upsilon

$vowel { υ } $softener <> v $under ; 
$vowel { υ } <> f $under; 
υ <> y ; 
$vowel { Υ } $softener <> V $under ; 
$vowel { Υ <> U $under ; 
Υ <> Y ; 

# NORMAL

α <> a ; 
Α <> A ; 

β <> v ; 
Β <> V ; 

γ } $gammaLike <> n } $egammaLike ; 
γ <> g ; 
Γ } $gammaLike <> N } $egammaLike ; 
Γ <> G ; 

δ <> d ; 
Δ <> D ; 

ε <> e ; 
Ε <> E ; 

ζ <> z ; 
Ζ <> Z ; 

θ <> th ; 
Θ } $beforeLower <> Th ; 
Θ <> TH ; 

ι <> i ; 
Ι <> I ; 

κ <> k ;
Κ <> K ; 

λ <> l ; 
Λ <> L ; 

μ <> m ; 
Μ <> M ; 

ν } $gammaLike > n\' ; 
ν <> n ; 
Ν } $gammaLike <> N\' ; 
Ν <> N ; 

ξ <> x ; 
Ξ <> X ; 

ο <> o ; 
Ο <> O ; 

π <> p ; 
Π <> P ; 

ρ <> r ; 
Ρ <> R ; 

[Pp] { } ς > \' ; 
[Pp] { } σ > \' ;

# Caron means exception

# before a letter, initial
ς } $beforeLetter <> s $caron } $beforeLetter;
σ } $beforeLetter <> s } $beforeLetter;

# otherwise, after a letter = final 
$afterLetter { σ <> $afterLetter { s $caron;
$afterLetter { ς <> $afterLetter { s ;

# otherwise (isolated) = initial
ς <> s $caron;
σ <> s ;

[Pp] { Σ <> \'S ; 
Σ <> S ; 

τ <> t ; 
Τ <> T ; 

φ <> f ; 
Φ <> F ;

χ <> ch ; 
Χ } $beforeLower <> Ch ; 
Χ <> CH ; 

# Completeness for ASCII

$ignore = [[:Mark:]''] * ;

| ch < h ;
| k  < c ;
| i  < j ;
| k < q ;
| y < u ;
| y < w ;

| Ch < H ;
| K < C ;
| I < J ;
| K < Q ;
| Y < W ;
| Y < U ;

# Completeness for Greek

ϐ > | β ;
ϑ > | θ ;
ϒ > | Υ ;
ϕ > | φ ;
ϖ > | π ;

ϰ > | κ ;
ϱ > | ρ ;
ϲ > | σ ;
ϳ > j ;
ϴ > | Θ ;
ϵ > | ε ;

# delete any trailing ' marks used for roundtripping

 < [Ππ] { \' } [Ss] ;
 < [Νν] { \' } $egammaLike ;

::NFC (NFD) ; 